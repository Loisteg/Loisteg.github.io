{"version":3,"sources":["hooks/http.hook.js","components/heroesList/heroesSlice.js","components/heroesListItem/HeroesListItem.js","components/spinner/Spinner.js","components/heroesList/HeroesList.js","components/heroesFilters/filtersSlice.js","store/index.js","components/heroesAddForm/HeroesAddForm.js","components/heroesFilters/HeroesFilters.js","components/app/App.js","index.js"],"names":["useHttp","request","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","heroesAdapter","createEntityAdapter","initialState","getInitialState","heroesLoadingStatus","fetchHeroes","createAsyncThunk","heroesSlice","createSlice","name","reducers","heroCreated","state","action","addOne","payload","heroDeleted","removeOne","extraReducers","builder","addCase","pending","fulfilled","setAll","rejected","addDefaultCase","actions","reducer","selectAll","getSelectors","heroes","filteredHeroesSelector","createSelector","filters","activeFilter","filter","item","element","heroesFetching","heroesFetched","heroesFetchingError","HeroesListItem","elementClassName","description","onDelete","className","src","alt","style","onClick","type","aria-label","Spinner","role","HeroesList","filteredHeroes","useSelector","dispatch","useDispatch","useEffect","useCallback","id","then","console","log","catch","err","arr","elements","length","CSSTransition","timeout","classNames","map","props","TransitionGroup","component","filtersAdapter","filtersLoadingStatus","fetchFilters","filtersSlice","activeFilterChanged","filtersFetching","filtersFetched","filtersFetchingError","stringMiddleWare","next","store","configureStore","middleware","getDefaultMiddleWare","concat","devTools","process","HeroesAddForm","useState","heroName","setHeroName","heroDescr","setHeroDescr","heroElement","setHeroElement","getState","onSubmit","e","preventDefault","newHero","uuidv4","JSON","stringify","res","htmlFor","required","placeholder","value","onChange","target","label","renderFilters","HeroesFilters","btnClass","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4b3ba888.chunk.js","sourcesContent":["export const useHttp = () => {\n\n    const request = (async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            return data;\n        } catch(e) {\n            throw e;\n        }\n    });\n\n    return {request}\n}","import { createSlice, createAsyncThunk, createEntityAdapter, createSelector } from \"@reduxjs/toolkit\";\nimport {useHttp} from '../../hooks/http.hook';\n\nconst heroesAdapter = createEntityAdapter();\n\nconst initialState = heroesAdapter.getInitialState({\n    heroesLoadingStatus: 'idle'\n})\n\nexport const fetchHeroes = createAsyncThunk(\n    'heroes/fetchHeroes',\n    () => {\n        const {request} = useHttp();\n        return request(\"http://localhost:3001/heroes\");\n    }\n)\n\nconst heroesSlice = createSlice({\n    name: 'heroes',\n    initialState,\n    reducers: {\n        heroCreated: (state, action) => {heroesAdapter.addOne(state, action.payload)},\n        heroDeleted: (state, action) => {heroesAdapter.removeOne(state, action.payload)}\n    }, \n    extraReducers: (builder) => {\n        builder\n            .addCase(fetchHeroes.pending, state => {\n                state.heroesLoadingStatus = 'loading'\n            })\n            .addCase(fetchHeroes.fulfilled, (state, action) => {\n                state.heroesLoadingStatus = 'idle'; \n                heroesAdapter.setAll(state, action.payload)\n            })\n            .addCase(fetchHeroes.rejected, state => {\n                state.heroesLoadingStatus = 'error'\n            })\n            .addDefaultCase(() => {})\n    }\n});\n\nconst {actions, reducer} = heroesSlice;\n\nexport default reducer;\n\nconst {selectAll} = heroesAdapter.getSelectors(state => state.heroes);\n\nexport const filteredHeroesSelector = createSelector(\n    (state) => state.filters.activeFilter,\n    selectAll,\n    (filter, heroes) => {\n        if (filter === 'all') {\n            return heroes;\n        } else {\n            return heroes.filter(item => item.element === filter)\n        }\n    }\n);\n\nexport const {\n    heroesFetching,\n    heroesFetched,\n    heroesFetchingError,\n    heroCreated,\n    heroDeleted\n} = actions;","\nconst HeroesListItem = ({name, description, element, onDelete}) => {\n\n    let elementClassName;\n\n    switch (element) {\n        case 'fire':\n            elementClassName = 'bg-danger bg-gradient';\n            break;\n        case 'water':\n            elementClassName = 'bg-primary bg-gradient';\n            break;\n        case 'wind':\n            elementClassName = 'bg-success bg-gradient';\n            break;\n        case 'earth':\n            elementClassName = 'bg-secondary bg-gradient';\n            break;\n        default:\n            elementClassName = 'bg-warning bg-gradient';\n    }\n\n    return (\n        <li \n            className={`card flex-row mb-4 shadow-lg text-white ${elementClassName}`}>\n            <img src=\"http://www.stpaulsteinbach.org/wp-content/uploads/2014/09/unknown-hero.jpg\" \n                 className=\"img-fluid w-25 d-inline\" \n                 alt=\"unknown hero\" \n                 style={{'objectFit': 'cover'}}/>\n            <div className=\"card-body\">\n                \n                <h3 className=\"card-title\">{name}</h3>\n                <p className=\"card-text\">{description}</p>\n            </div>\n            <span onClick={onDelete} className=\"position-absolute top-0 start-100 translate-middle badge border rounded-pill bg-light\">\n                <button type=\"button\" className=\"btn-close btn-close\" aria-label=\"Close\"></button>\n            </span>\n        </li>\n    )\n}\n\nexport default HeroesListItem;","\nconst Spinner = () => {\n    return (\n        <div className=\"spinner-border mx-auto mt-5\" role=\"status\">\n            <span className=\"visually-hidden\">Loading...</span>\n        </div>\n    )\n}\n\nexport default Spinner;","import {useHttp} from '../../hooks/http.hook';\nimport { useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport {heroDeleted, fetchHeroes, filteredHeroesSelector} from \"./heroesSlice\"\n\nimport HeroesListItem from \"../heroesListItem/HeroesListItem\";\nimport Spinner from '../spinner/Spinner';\n\nimport './heroesList.scss';\n\nconst HeroesList = () => {\n\n    const filteredHeroes = useSelector(filteredHeroesSelector)\n    const heroesLoadingStatus = useSelector(state => state.heroes.heroesLoadingStatus);\n    const dispatch = useDispatch();\n    const {request} = useHttp();\n\n    useEffect(() => {\n        dispatch(fetchHeroes())\n        // eslint-disable-next-line\n    }, []);\n\n    const onDelete = useCallback((id) => {\n        request(`http://localhost:3001/heroes/${id}`, \"DELETE\")\n            .then(data => console.log(data, 'Deleted'))\n            .then(dispatch(heroDeleted(id)))\n            .catch(err => console.log(err))\n        // eslint-disable-next-line\n    }, [request])\n\n    if (heroesLoadingStatus === \"loading\") {\n        return <Spinner/>;\n    } else if (heroesLoadingStatus === \"error\") {\n        return <h5 className=\"text-center mt-5\">Ошибка загрузки</h5>\n    }\n\n    const renderHeroesList = (arr) => {\n        if (arr.length === 0) {\n            return <CSSTransition  timeout={0} classNames=\"hero\">\n                    <h5 className=\"text-center mt-5\">Героев пока нет</h5>\n                </CSSTransition>\n            \n        }\n\n        return arr.map(({id, ...props}) => {\n            return <CSSTransition key={id} timeout={1000} classNames=\"hero\">\n                        <HeroesListItem {...props} onDelete={() => onDelete(id)}/>\n                    </CSSTransition>\n        })\n    }\n\n    const elements = renderHeroesList(filteredHeroes);\n    return (\n        <TransitionGroup component=\"ul\">\n            {elements}\n        </TransitionGroup>\n    )\n}\n\nexport default HeroesList;","import { createSlice, createAsyncThunk, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport {useHttp} from '../../hooks/http.hook';\n\nconst filtersAdapter = createEntityAdapter();\n\nconst initialState = filtersAdapter.getInitialState({\n    filtersLoadingStatus: 'idle',\n    activeFilter: 'all'\n})\n\nexport const fetchFilters = createAsyncThunk(\n    'filters/fetchFilters',\n    () => {\n        const {request} = useHttp();\n        return request(\"http://localhost:3001/filters\");\n    }\n)\n\n\nconst filtersSlice = createSlice({\n    name: 'filters',\n    initialState,\n    reducers: {\n        activeFilterChanged: (state, action) => {state.activeFilter = action.payload}\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(fetchFilters.pending, state => {\n                state.filtersLoadingStatus = 'loading'\n            })\n            .addCase(fetchFilters.fulfilled, (state, action) => {\n                state.filtersLoadingStatus = 'idle'; \n                filtersAdapter.setAll(state, action.payload);\n            })\n            .addCase(fetchFilters.rejected, state => {\n                state.filtersLoadingStatus = 'error'\n            })\n            .addDefaultCase(() => {})\n    }\n});\n\nconst {actions, reducer} = filtersSlice;\n\nexport default reducer;\n\nexport const {selectAll} = filtersAdapter.getSelectors(state => state.filters);\n\nexport const {\n    filtersFetching,\n    filtersFetched,\n    filtersFetchingError,\n    activeFilterChanged,\n} = actions;\n","import {configureStore} from '@reduxjs/toolkit';\nimport heroes from '../components/heroesList/heroesSlice';\nimport filters from '../components/heroesFilters/filtersSlice';\n\n\nconst stringMiddleWare = () => (next) => (action) => {\n    if (typeof action === 'string') {\n        return next({\n            type: action\n        })\n    }\n    return next(action)\n}\n\nconst store = configureStore({\n    reducer: {heroes, filters},\n    middleware: getDefaultMiddleWare => getDefaultMiddleWare().concat(stringMiddleWare) ,\n    devTools: process.env.NODE_ENV !== 'production'\n})\n\nexport default store;","import {useHttp} from '../../hooks/http.hook';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport store from '../../store';\nimport {selectAll} from '../heroesFilters/filtersSlice';\nimport { heroCreated} from \"../heroesList/heroesSlice\";\nimport { useState } from \"react\";\n\n\n\nconst HeroesAddForm = () => {\n    const [heroName, setHeroName] = useState('');\n    const [heroDescr, setHeroDescr] = useState('');\n    const [heroElement, setHeroElement] = useState('');\n    const {filtersLoadingStatus} = useSelector(state => state.filters);\n\n    const filters = selectAll(store.getState());\n    const dispatch = useDispatch();\n    const {request} = useHttp();\n\n    const onSubmitHandler = (e) => {\n        e.preventDefault();\n        const newHero = {\n            id: uuidv4(),\n            name: heroName,\n            description: heroDescr,\n            element: heroElement\n        }\n\n        request(\"http://localhost:3001/heroes\", \"POST\", JSON.stringify(newHero))\n            .then(res => console.log(res, 'Отправка успешна'))\n            .then(dispatch(heroCreated(newHero)))\n            .catch(err => console.log(err));\n\n        setHeroName('');\n        setHeroDescr('');\n        setHeroElement('');\n    }\n\n    const renderFilters = (filters, status) => {\n        if (status === \"loading\") {\n            return <option>Загрузка элементов</option>\n        } else if (status === \"error\") {\n            return <option>Ошибка загрузки</option>\n        }\n        \n        if (filters && filters.length > 0 ) {\n            return filters.map(({name, label}) => {\n                // eslint-disable-next-line\n                if (name === 'all')  return;\n\n                return <option key={name} value={name}>{label}</option>\n            })\n        }\n    }\n\n    return (\n        <form className=\"border p-4 shadow-lg rounded\" onSubmit={onSubmitHandler}>\n            <div className=\"mb-3\">\n                <label htmlFor=\"name\" className=\"form-label fs-4\">Имя нового героя</label>\n                <input \n                    required\n                    type=\"text\" \n                    name=\"name\" \n                    className=\"form-control\" \n                    id=\"name\" \n                    placeholder=\"Как меня зовут?\"\n                    value={heroName}\n                    onChange={(e) => setHeroName(e.target.value)}/>\n            </div>\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"text\" className=\"form-label fs-4\">Описание</label>\n                <textarea\n                    required\n                    name=\"text\" \n                    className=\"form-control\" \n                    id=\"text\" \n                    placeholder=\"Что я умею?\"\n                    style={{\"height\": '130px'}}\n                    value={heroDescr}\n                    onChange={(e) => setHeroDescr(e.target.value)}/>\n            </div>\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"element\" className=\"form-label\">Выбрать элемент героя</label>\n                <select \n                    required\n                    className=\"form-select\" \n                    id=\"element\" \n                    name=\"element\"\n                    value={heroElement}\n                    onChange={(e) => setHeroElement(e.target.value)}>\n                    <option >Я владею элементом...</option>\n                    {renderFilters(filters, filtersLoadingStatus)}\n                </select>\n            </div>\n\n            <button type=\"submit\" className=\"btn btn-primary\">Создать</button>\n        </form>\n    )\n}\n\nexport default HeroesAddForm;","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport store from '../../store'\n\nimport {activeFilterChanged, fetchFilters, selectAll} from './filtersSlice';\nimport Spinner from '../spinner/Spinner';\n\nconst HeroesFilters = () => {\n\n    const {filtersLoadingStatus, activeFilter} = useSelector(state => state.filters);\n    const filters = selectAll(store.getState());\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchFilters())\n\n        // eslint-disable-next-line\n    }, []);\n\n    if (filtersLoadingStatus === \"loading\") {\n        return <Spinner/>;\n    } else if (filtersLoadingStatus === \"error\") {\n        return <h5 className=\"text-center mt-5\">Ошибка загрузки</h5>\n    }\n\n    const renderFilters = (arr) => {\n        if (arr.length === 0) {\n            return <h5 className=\"text-center mt-5\">Фильтры не найдены</h5>\n        }\n\n        return arr.map(({name, className, label}) => {\n\n            const btnClass = classNames('btn', className, {\n                'active': name === activeFilter\n            });\n            \n            return <button \n                        key={name} \n                        id={name} \n                        className={btnClass}\n                        onClick={() => dispatch(activeFilterChanged(name))}\n                        >{label}</button>\n        })\n    }\n\n    const elements = renderFilters(filters);\n\n    return (\n        <div className=\"card shadow-lg mt-4\">\n            <div className=\"card-body\">\n                <p className=\"card-text\">Отфильтруйте героев по элементам</p>\n                <div className=\"btn-group\">\n                    {elements}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default HeroesFilters;","import HeroesList from '../heroesList/HeroesList';\nimport HeroesAddForm from '../heroesAddForm/HeroesAddForm';\nimport HeroesFilters from '../heroesFilters/HeroesFilters';\n\nimport './app.scss';\n\nconst App = () => {\n    \n    return (\n        <main className=\"app\">\n            <div className=\"content\">\n                <HeroesList/>\n                <div className=\"content__interactive\">\n                    <HeroesAddForm/>\n                    <HeroesFilters/>\n                </div>\n            </div>\n        </main>\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './components/app/App';\nimport store from './store';\n\nimport './styles/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}